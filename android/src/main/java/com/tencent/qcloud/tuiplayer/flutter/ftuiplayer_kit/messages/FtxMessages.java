// Copyright (c) 2024 Tencent. All rights reserved.
// Autogenerated from Pigeon (v21.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.tencent.qcloud.tuiplayer.flutter.ftuiplayer_kit.messages;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class FtxMessages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FTUIPlayerConfigMsg {
    private @Nullable String licenseUrl;

    public @Nullable String getLicenseUrl() {
      return licenseUrl;
    }

    public void setLicenseUrl(@Nullable String setterArg) {
      this.licenseUrl = setterArg;
    }

    private @Nullable String licenseKey;

    public @Nullable String getLicenseKey() {
      return licenseKey;
    }

    public void setLicenseKey(@Nullable String setterArg) {
      this.licenseKey = setterArg;
    }

    private @Nullable Boolean enableLog;

    public @Nullable Boolean getEnableLog() {
      return enableLog;
    }

    public void setEnableLog(@Nullable Boolean setterArg) {
      this.enableLog = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FTUIPlayerConfigMsg that = (FTUIPlayerConfigMsg) o;
      return Objects.equals(licenseUrl, that.licenseUrl) && Objects.equals(licenseKey, that.licenseKey) && Objects.equals(enableLog, that.enableLog);
    }

    @Override
    public int hashCode() {
      return Objects.hash(licenseUrl, licenseKey, enableLog);
    }

    public static final class Builder {

      private @Nullable String licenseUrl;

      @CanIgnoreReturnValue
      public @NonNull Builder setLicenseUrl(@Nullable String setterArg) {
        this.licenseUrl = setterArg;
        return this;
      }

      private @Nullable String licenseKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setLicenseKey(@Nullable String setterArg) {
        this.licenseKey = setterArg;
        return this;
      }

      private @Nullable Boolean enableLog;

      @CanIgnoreReturnValue
      public @NonNull Builder setEnableLog(@Nullable Boolean setterArg) {
        this.enableLog = setterArg;
        return this;
      }

      public @NonNull FTUIPlayerConfigMsg build() {
        FTUIPlayerConfigMsg pigeonReturn = new FTUIPlayerConfigMsg();
        pigeonReturn.setLicenseUrl(licenseUrl);
        pigeonReturn.setLicenseKey(licenseKey);
        pigeonReturn.setEnableLog(enableLog);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(licenseUrl);
      toListResult.add(licenseKey);
      toListResult.add(enableLog);
      return toListResult;
    }

    static @NonNull FTUIPlayerConfigMsg fromList(@NonNull ArrayList<Object> __pigeon_list) {
      FTUIPlayerConfigMsg pigeonResult = new FTUIPlayerConfigMsg();
      Object licenseUrl = __pigeon_list.get(0);
      pigeonResult.setLicenseUrl((String) licenseUrl);
      Object licenseKey = __pigeon_list.get(1);
      pigeonResult.setLicenseKey((String) licenseKey);
      Object enableLog = __pigeon_list.get(2);
      pigeonResult.setEnableLog((Boolean) enableLog);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FTUIVodSourceMsg {
    private @Nullable String videoURL;

    public @Nullable String getVideoURL() {
      return videoURL;
    }

    public void setVideoURL(@Nullable String setterArg) {
      this.videoURL = setterArg;
    }

    private @Nullable String coverPictureUrl;

    public @Nullable String getCoverPictureUrl() {
      return coverPictureUrl;
    }

    public void setCoverPictureUrl(@Nullable String setterArg) {
      this.coverPictureUrl = setterArg;
    }

    private @Nullable Long appId;

    public @Nullable Long getAppId() {
      return appId;
    }

    public void setAppId(@Nullable Long setterArg) {
      this.appId = setterArg;
    }

    private @Nullable String fileId;

    public @Nullable String getFileId() {
      return fileId;
    }

    public void setFileId(@Nullable String setterArg) {
      this.fileId = setterArg;
    }

    private @Nullable String pSign;

    public @Nullable String getPSign() {
      return pSign;
    }

    public void setPSign(@Nullable String setterArg) {
      this.pSign = setterArg;
    }

    private @Nullable Boolean isAutoPlay;

    public @Nullable Boolean getIsAutoPlay() {
      return isAutoPlay;
    }

    public void setIsAutoPlay(@Nullable Boolean setterArg) {
      this.isAutoPlay = setterArg;
    }

    private @Nullable Object extInfo;

    public @Nullable Object getExtInfo() {
      return extInfo;
    }

    public void setExtInfo(@Nullable Object setterArg) {
      this.extInfo = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FTUIVodSourceMsg that = (FTUIVodSourceMsg) o;
      return Objects.equals(videoURL, that.videoURL) && Objects.equals(coverPictureUrl, that.coverPictureUrl) && Objects.equals(appId, that.appId) && Objects.equals(fileId, that.fileId) && Objects.equals(pSign, that.pSign) && Objects.equals(isAutoPlay, that.isAutoPlay) && Objects.equals(extInfo, that.extInfo);
    }

    @Override
    public int hashCode() {
      return Objects.hash(videoURL, coverPictureUrl, appId, fileId, pSign, isAutoPlay, extInfo);
    }

    public static final class Builder {

      private @Nullable String videoURL;

      @CanIgnoreReturnValue
      public @NonNull Builder setVideoURL(@Nullable String setterArg) {
        this.videoURL = setterArg;
        return this;
      }

      private @Nullable String coverPictureUrl;

      @CanIgnoreReturnValue
      public @NonNull Builder setCoverPictureUrl(@Nullable String setterArg) {
        this.coverPictureUrl = setterArg;
        return this;
      }

      private @Nullable Long appId;

      @CanIgnoreReturnValue
      public @NonNull Builder setAppId(@Nullable Long setterArg) {
        this.appId = setterArg;
        return this;
      }

      private @Nullable String fileId;

      @CanIgnoreReturnValue
      public @NonNull Builder setFileId(@Nullable String setterArg) {
        this.fileId = setterArg;
        return this;
      }

      private @Nullable String pSign;

      @CanIgnoreReturnValue
      public @NonNull Builder setPSign(@Nullable String setterArg) {
        this.pSign = setterArg;
        return this;
      }

      private @Nullable Boolean isAutoPlay;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsAutoPlay(@Nullable Boolean setterArg) {
        this.isAutoPlay = setterArg;
        return this;
      }

      private @Nullable Object extInfo;

      @CanIgnoreReturnValue
      public @NonNull Builder setExtInfo(@Nullable Object setterArg) {
        this.extInfo = setterArg;
        return this;
      }

      public @NonNull FTUIVodSourceMsg build() {
        FTUIVodSourceMsg pigeonReturn = new FTUIVodSourceMsg();
        pigeonReturn.setVideoURL(videoURL);
        pigeonReturn.setCoverPictureUrl(coverPictureUrl);
        pigeonReturn.setAppId(appId);
        pigeonReturn.setFileId(fileId);
        pigeonReturn.setPSign(pSign);
        pigeonReturn.setIsAutoPlay(isAutoPlay);
        pigeonReturn.setExtInfo(extInfo);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(videoURL);
      toListResult.add(coverPictureUrl);
      toListResult.add(appId);
      toListResult.add(fileId);
      toListResult.add(pSign);
      toListResult.add(isAutoPlay);
      toListResult.add(extInfo);
      return toListResult;
    }

    static @NonNull FTUIVodSourceMsg fromList(@NonNull ArrayList<Object> __pigeon_list) {
      FTUIVodSourceMsg pigeonResult = new FTUIVodSourceMsg();
      Object videoURL = __pigeon_list.get(0);
      pigeonResult.setVideoURL((String) videoURL);
      Object coverPictureUrl = __pigeon_list.get(1);
      pigeonResult.setCoverPictureUrl((String) coverPictureUrl);
      Object appId = __pigeon_list.get(2);
      pigeonResult.setAppId((appId == null) ? null : ((appId instanceof Integer) ? (Integer) appId : (Long) appId));
      Object fileId = __pigeon_list.get(3);
      pigeonResult.setFileId((String) fileId);
      Object pSign = __pigeon_list.get(4);
      pigeonResult.setPSign((String) pSign);
      Object isAutoPlay = __pigeon_list.get(5);
      pigeonResult.setIsAutoPlay((Boolean) isAutoPlay);
      Object extInfo = __pigeon_list.get(6);
      pigeonResult.setExtInfo(extInfo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FTUIListVodSourceMsg {
    private @Nullable List<FTUIVodSourceMsg> listMsg;

    public @Nullable List<FTUIVodSourceMsg> getListMsg() {
      return listMsg;
    }

    public void setListMsg(@Nullable List<FTUIVodSourceMsg> setterArg) {
      this.listMsg = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FTUIListVodSourceMsg that = (FTUIListVodSourceMsg) o;
      return Objects.equals(listMsg, that.listMsg);
    }

    @Override
    public int hashCode() {
      return Objects.hash(listMsg);
    }

    public static final class Builder {

      private @Nullable List<FTUIVodSourceMsg> listMsg;

      @CanIgnoreReturnValue
      public @NonNull Builder setListMsg(@Nullable List<FTUIVodSourceMsg> setterArg) {
        this.listMsg = setterArg;
        return this;
      }

      public @NonNull FTUIListVodSourceMsg build() {
        FTUIListVodSourceMsg pigeonReturn = new FTUIListVodSourceMsg();
        pigeonReturn.setListMsg(listMsg);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(listMsg);
      return toListResult;
    }

    static @NonNull FTUIListVodSourceMsg fromList(@NonNull ArrayList<Object> __pigeon_list) {
      FTUIListVodSourceMsg pigeonResult = new FTUIListVodSourceMsg();
      Object listMsg = __pigeon_list.get(0);
      pigeonResult.setListMsg((List<FTUIVodSourceMsg>) listMsg);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FTUIPlayerVodStrategyMsg {
    private @Nullable Long preloadCount;

    public @Nullable Long getPreloadCount() {
      return preloadCount;
    }

    public void setPreloadCount(@Nullable Long setterArg) {
      this.preloadCount = setterArg;
    }

    private @Nullable Double preDownloadSize;

    public @Nullable Double getPreDownloadSize() {
      return preDownloadSize;
    }

    public void setPreDownloadSize(@Nullable Double setterArg) {
      this.preDownloadSize = setterArg;
    }

    private @Nullable Double preloadBufferSizeInMB;

    public @Nullable Double getPreloadBufferSizeInMB() {
      return preloadBufferSizeInMB;
    }

    public void setPreloadBufferSizeInMB(@Nullable Double setterArg) {
      this.preloadBufferSizeInMB = setterArg;
    }

    private @Nullable Double maxBufferSize;

    public @Nullable Double getMaxBufferSize() {
      return maxBufferSize;
    }

    public void setMaxBufferSize(@Nullable Double setterArg) {
      this.maxBufferSize = setterArg;
    }

    private @Nullable Long preferredResolution;

    public @Nullable Long getPreferredResolution() {
      return preferredResolution;
    }

    public void setPreferredResolution(@Nullable Long setterArg) {
      this.preferredResolution = setterArg;
    }

    private @Nullable Long progressInterval;

    public @Nullable Long getProgressInterval() {
      return progressInterval;
    }

    public void setProgressInterval(@Nullable Long setterArg) {
      this.progressInterval = setterArg;
    }

    private @Nullable Long renderMode;

    public @Nullable Long getRenderMode() {
      return renderMode;
    }

    public void setRenderMode(@Nullable Long setterArg) {
      this.renderMode = setterArg;
    }

    private @Nullable Boolean enableSuperResolution;

    public @Nullable Boolean getEnableSuperResolution() {
      return enableSuperResolution;
    }

    public void setEnableSuperResolution(@Nullable Boolean setterArg) {
      this.enableSuperResolution = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FTUIPlayerVodStrategyMsg that = (FTUIPlayerVodStrategyMsg) o;
      return Objects.equals(preloadCount, that.preloadCount) && Objects.equals(preDownloadSize, that.preDownloadSize) && Objects.equals(preloadBufferSizeInMB, that.preloadBufferSizeInMB) && Objects.equals(maxBufferSize, that.maxBufferSize) && Objects.equals(preferredResolution, that.preferredResolution) && Objects.equals(progressInterval, that.progressInterval) && Objects.equals(renderMode, that.renderMode) && Objects.equals(enableSuperResolution, that.enableSuperResolution);
    }

    @Override
    public int hashCode() {
      return Objects.hash(preloadCount, preDownloadSize, preloadBufferSizeInMB, maxBufferSize, preferredResolution, progressInterval, renderMode, enableSuperResolution);
    }

    public static final class Builder {

      private @Nullable Long preloadCount;

      @CanIgnoreReturnValue
      public @NonNull Builder setPreloadCount(@Nullable Long setterArg) {
        this.preloadCount = setterArg;
        return this;
      }

      private @Nullable Double preDownloadSize;

      @CanIgnoreReturnValue
      public @NonNull Builder setPreDownloadSize(@Nullable Double setterArg) {
        this.preDownloadSize = setterArg;
        return this;
      }

      private @Nullable Double preloadBufferSizeInMB;

      @CanIgnoreReturnValue
      public @NonNull Builder setPreloadBufferSizeInMB(@Nullable Double setterArg) {
        this.preloadBufferSizeInMB = setterArg;
        return this;
      }

      private @Nullable Double maxBufferSize;

      @CanIgnoreReturnValue
      public @NonNull Builder setMaxBufferSize(@Nullable Double setterArg) {
        this.maxBufferSize = setterArg;
        return this;
      }

      private @Nullable Long preferredResolution;

      @CanIgnoreReturnValue
      public @NonNull Builder setPreferredResolution(@Nullable Long setterArg) {
        this.preferredResolution = setterArg;
        return this;
      }

      private @Nullable Long progressInterval;

      @CanIgnoreReturnValue
      public @NonNull Builder setProgressInterval(@Nullable Long setterArg) {
        this.progressInterval = setterArg;
        return this;
      }

      private @Nullable Long renderMode;

      @CanIgnoreReturnValue
      public @NonNull Builder setRenderMode(@Nullable Long setterArg) {
        this.renderMode = setterArg;
        return this;
      }

      private @Nullable Boolean enableSuperResolution;

      @CanIgnoreReturnValue
      public @NonNull Builder setEnableSuperResolution(@Nullable Boolean setterArg) {
        this.enableSuperResolution = setterArg;
        return this;
      }

      public @NonNull FTUIPlayerVodStrategyMsg build() {
        FTUIPlayerVodStrategyMsg pigeonReturn = new FTUIPlayerVodStrategyMsg();
        pigeonReturn.setPreloadCount(preloadCount);
        pigeonReturn.setPreDownloadSize(preDownloadSize);
        pigeonReturn.setPreloadBufferSizeInMB(preloadBufferSizeInMB);
        pigeonReturn.setMaxBufferSize(maxBufferSize);
        pigeonReturn.setPreferredResolution(preferredResolution);
        pigeonReturn.setProgressInterval(progressInterval);
        pigeonReturn.setRenderMode(renderMode);
        pigeonReturn.setEnableSuperResolution(enableSuperResolution);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(preloadCount);
      toListResult.add(preDownloadSize);
      toListResult.add(preloadBufferSizeInMB);
      toListResult.add(maxBufferSize);
      toListResult.add(preferredResolution);
      toListResult.add(progressInterval);
      toListResult.add(renderMode);
      toListResult.add(enableSuperResolution);
      return toListResult;
    }

    static @NonNull FTUIPlayerVodStrategyMsg fromList(@NonNull ArrayList<Object> __pigeon_list) {
      FTUIPlayerVodStrategyMsg pigeonResult = new FTUIPlayerVodStrategyMsg();
      Object preloadCount = __pigeon_list.get(0);
      pigeonResult.setPreloadCount((preloadCount == null) ? null : ((preloadCount instanceof Integer) ? (Integer) preloadCount : (Long) preloadCount));
      Object preDownloadSize = __pigeon_list.get(1);
      pigeonResult.setPreDownloadSize((Double) preDownloadSize);
      Object preloadBufferSizeInMB = __pigeon_list.get(2);
      pigeonResult.setPreloadBufferSizeInMB((Double) preloadBufferSizeInMB);
      Object maxBufferSize = __pigeon_list.get(3);
      pigeonResult.setMaxBufferSize((Double) maxBufferSize);
      Object preferredResolution = __pigeon_list.get(4);
      pigeonResult.setPreferredResolution((preferredResolution == null) ? null : ((preferredResolution instanceof Integer) ? (Integer) preferredResolution : (Long) preferredResolution));
      Object progressInterval = __pigeon_list.get(5);
      pigeonResult.setProgressInterval((progressInterval == null) ? null : ((progressInterval instanceof Integer) ? (Integer) progressInterval : (Long) progressInterval));
      Object renderMode = __pigeon_list.get(6);
      pigeonResult.setRenderMode((renderMode == null) ? null : ((renderMode instanceof Integer) ? (Integer) renderMode : (Long) renderMode));
      Object enableSuperResolution = __pigeon_list.get(7);
      pigeonResult.setEnableSuperResolution((Boolean) enableSuperResolution);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return FTUIPlayerConfigMsg.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return FTUIVodSourceMsg.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return FTUIListVodSourceMsg.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return FTUIPlayerVodStrategyMsg.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof FTUIPlayerConfigMsg) {
        stream.write(129);
        writeValue(stream, ((FTUIPlayerConfigMsg) value).toList());
      } else if (value instanceof FTUIVodSourceMsg) {
        stream.write(130);
        writeValue(stream, ((FTUIVodSourceMsg) value).toList());
      } else if (value instanceof FTUIListVodSourceMsg) {
        stream.write(131);
        writeValue(stream, ((FTUIListVodSourceMsg) value).toList());
      } else if (value instanceof FTUIPlayerVodStrategyMsg) {
        stream.write(132);
        writeValue(stream, ((FTUIPlayerVodStrategyMsg) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FTUIPlayerKitPluginAPI {

    void setConfig(@NonNull FTUIPlayerConfigMsg msg);

    @NonNull 
    Long createShortEngine();

    void setMonetAppInfo(@NonNull Long appId, @NonNull Long authId, @NonNull Long srAlgorithmType);

    /** The codec used by FTUIPlayerKitPluginAPI. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `FTUIPlayerKitPluginAPI` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable FTUIPlayerKitPluginAPI api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable FTUIPlayerKitPluginAPI api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerKitPluginAPI.setConfig" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                FTUIPlayerConfigMsg msgArg = (FTUIPlayerConfigMsg) args.get(0);
                try {
                  api.setConfig(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerKitPluginAPI.createShortEngine" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.createShortEngine();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerKitPluginAPI.setMonetAppInfo" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number appIdArg = (Number) args.get(0);
                Number authIdArg = (Number) args.get(1);
                Number srAlgorithmTypeArg = (Number) args.get(2);
                try {
                  api.setMonetAppInfo((appIdArg == null) ? null : appIdArg.longValue(), (authIdArg == null) ? null : authIdArg.longValue(), (srAlgorithmTypeArg == null) ? null : srAlgorithmTypeArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FTUIPlayerShortAPI {

    @NonNull 
    Long setModels(@NonNull FTUIListVodSourceMsg msg);

    @NonNull 
    Long appendModels(@NonNull FTUIListVodSourceMsg msg);

    @NonNull 
    Long startCurrent();

    void setVodStrategy(@NonNull FTUIPlayerVodStrategyMsg msg);

    @NonNull 
    FTUIVodSourceMsg getCurrentModel();

    void bindVideoView(@NonNull Long pageViewId, @NonNull Long index);

    void preBindVideo(@NonNull Long pageViewId, @NonNull Long index);

    void release();

    /** The codec used by FTUIPlayerShortAPI. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `FTUIPlayerShortAPI` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable FTUIPlayerShortAPI api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable FTUIPlayerShortAPI api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerShortAPI.setModels" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                FTUIListVodSourceMsg msgArg = (FTUIListVodSourceMsg) args.get(0);
                try {
                  Long output = api.setModels(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerShortAPI.appendModels" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                FTUIListVodSourceMsg msgArg = (FTUIListVodSourceMsg) args.get(0);
                try {
                  Long output = api.appendModels(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerShortAPI.startCurrent" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.startCurrent();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerShortAPI.setVodStrategy" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                FTUIPlayerVodStrategyMsg msgArg = (FTUIPlayerVodStrategyMsg) args.get(0);
                try {
                  api.setVodStrategy(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerShortAPI.getCurrentModel" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  FTUIVodSourceMsg output = api.getCurrentModel();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerShortAPI.bindVideoView" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number pageViewIdArg = (Number) args.get(0);
                Number indexArg = (Number) args.get(1);
                try {
                  api.bindVideoView((pageViewIdArg == null) ? null : pageViewIdArg.longValue(), (indexArg == null) ? null : indexArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerShortAPI.preBindVideo" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number pageViewIdArg = (Number) args.get(0);
                Number indexArg = (Number) args.get(1);
                try {
                  api.preBindVideo((pageViewIdArg == null) ? null : pageViewIdArg.longValue(), (indexArg == null) ? null : indexArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIPlayerShortAPI.release" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.release();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FTUIVodPlayerAPI {

    void startPlay(@NonNull FTUIVodSourceMsg msg);

    void pause();

    void resume();

    void setRate(@NonNull Double rate);

    void setMute(@NonNull Boolean mute);

    void seekTo(@NonNull Double time);

    void setStringOption(@NonNull String value, @NonNull Object key);

    @NonNull 
    Double getDuration();

    @NonNull 
    Double getCurrentPlayTime();

    @NonNull 
    Boolean isPlaying();

    void release();

    /** The codec used by FTUIVodPlayerAPI. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `FTUIVodPlayerAPI` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable FTUIVodPlayerAPI api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable FTUIVodPlayerAPI api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.startPlay" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                FTUIVodSourceMsg msgArg = (FTUIVodSourceMsg) args.get(0);
                try {
                  api.startPlay(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.pause" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.pause();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.resume" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.resume();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.setRate" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Double rateArg = (Double) args.get(0);
                try {
                  api.setRate(rateArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.setMute" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean muteArg = (Boolean) args.get(0);
                try {
                  api.setMute(muteArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.seekTo" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Double timeArg = (Double) args.get(0);
                try {
                  api.seekTo(timeArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.setStringOption" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String valueArg = (String) args.get(0);
                Object keyArg = args.get(1);
                try {
                  api.setStringOption(valueArg, keyArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.getDuration" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Double output = api.getDuration();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.getCurrentPlayTime" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Double output = api.getCurrentPlayTime();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.isPlaying" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isPlaying();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerAPI.release" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.release();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FTUIVodPlayerFlutterAPI {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public FTUIVodPlayerFlutterAPI(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public FTUIVodPlayerFlutterAPI(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by FTUIVodPlayerFlutterAPI. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void onPlayEvent(@NonNull Map<String, Object> eventArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerFlutterAPI.onPlayEvent" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(eventArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onBindVodController(@NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerFlutterAPI.onBindVodController" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onUnBindVodController(@NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.ftuiplayer_kit.FTUIVodPlayerFlutterAPI.onUnBindVodController" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
