// Copyright (c) 2024 Tencent. All rights reserved.
// Autogenerated from Pigeon (v21.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class FTUIPlayerConfigMsg;
@class FTUIVodSourceMsg;
@class FTUIListVodSourceMsg;
@class FTUIPlayerVodStrategyMsg;

@interface FTUIPlayerConfigMsg : NSObject
+ (instancetype)makeWithLicenseUrl:(nullable NSString *)licenseUrl
    licenseKey:(nullable NSString *)licenseKey
    enableLog:(nullable NSNumber *)enableLog;
@property(nonatomic, copy, nullable) NSString * licenseUrl;
@property(nonatomic, copy, nullable) NSString * licenseKey;
@property(nonatomic, strong, nullable) NSNumber * enableLog;
@end

@interface FTUIVodSourceMsg : NSObject
+ (instancetype)makeWithVideoURL:(nullable NSString *)videoURL
    coverPictureUrl:(nullable NSString *)coverPictureUrl
    appId:(nullable NSNumber *)appId
    fileId:(nullable NSString *)fileId
    pSign:(nullable NSString *)pSign
    isAutoPlay:(nullable NSNumber *)isAutoPlay
    extInfo:(nullable id )extInfo;
@property(nonatomic, copy, nullable) NSString * videoURL;
@property(nonatomic, copy, nullable) NSString * coverPictureUrl;
@property(nonatomic, strong, nullable) NSNumber * appId;
@property(nonatomic, copy, nullable) NSString * fileId;
@property(nonatomic, copy, nullable) NSString * pSign;
@property(nonatomic, strong, nullable) NSNumber * isAutoPlay;
@property(nonatomic, strong, nullable) id  extInfo;
@end

@interface FTUIListVodSourceMsg : NSObject
+ (instancetype)makeWithListMsg:(nullable NSArray<FTUIVodSourceMsg *> *)listMsg;
@property(nonatomic, copy, nullable) NSArray<FTUIVodSourceMsg *> * listMsg;
@end

@interface FTUIPlayerVodStrategyMsg : NSObject
+ (instancetype)makeWithPreloadCount:(nullable NSNumber *)preloadCount
    preDownloadSize:(nullable NSNumber *)preDownloadSize
    preloadBufferSizeInMB:(nullable NSNumber *)preloadBufferSizeInMB
    maxBufferSize:(nullable NSNumber *)maxBufferSize
    preferredResolution:(nullable NSNumber *)preferredResolution
    progressInterval:(nullable NSNumber *)progressInterval
    renderMode:(nullable NSNumber *)renderMode
    enableSuperResolution:(nullable NSNumber *)enableSuperResolution;
@property(nonatomic, strong, nullable) NSNumber * preloadCount;
@property(nonatomic, strong, nullable) NSNumber * preDownloadSize;
@property(nonatomic, strong, nullable) NSNumber * preloadBufferSizeInMB;
@property(nonatomic, strong, nullable) NSNumber * maxBufferSize;
@property(nonatomic, strong, nullable) NSNumber * preferredResolution;
@property(nonatomic, strong, nullable) NSNumber * progressInterval;
@property(nonatomic, strong, nullable) NSNumber * renderMode;
@property(nonatomic, strong, nullable) NSNumber * enableSuperResolution;
@end

/// The codec used by all APIs.
NSObject<FlutterMessageCodec> *nullGetFtxMessagesCodec(void);

@protocol FTUIPlayerKitPluginAPI
- (void)setConfigMsg:(FTUIPlayerConfigMsg *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)createShortEngineWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setMonetAppInfoAppId:(NSInteger)appId authId:(NSInteger)authId srAlgorithmType:(NSInteger)srAlgorithmType error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFTUIPlayerKitPluginAPI(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTUIPlayerKitPluginAPI> *_Nullable api);

extern void SetUpFTUIPlayerKitPluginAPIWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTUIPlayerKitPluginAPI> *_Nullable api, NSString *messageChannelSuffix);


@protocol FTUIPlayerShortAPI
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)setModelsMsg:(FTUIListVodSourceMsg *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)appendModelsMsg:(FTUIListVodSourceMsg *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)startCurrentWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setVodStrategyMsg:(FTUIPlayerVodStrategyMsg *)msg error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FTUIVodSourceMsg *)getCurrentModelWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)bindVideoViewPageViewId:(NSInteger)pageViewId index:(NSInteger)index error:(FlutterError *_Nullable *_Nonnull)error;
- (void)preBindVideoPageViewId:(NSInteger)pageViewId index:(NSInteger)index error:(FlutterError *_Nullable *_Nonnull)error;
- (void)releaseWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFTUIPlayerShortAPI(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTUIPlayerShortAPI> *_Nullable api);

extern void SetUpFTUIPlayerShortAPIWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTUIPlayerShortAPI> *_Nullable api, NSString *messageChannelSuffix);


@protocol FTUIVodPlayerAPI
- (void)startPlayMsg:(FTUIVodSourceMsg *)msg error:(FlutterError *_Nullable *_Nonnull)error;
- (void)pauseWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)resumeWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)setRateRate:(double)rate error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setMuteMute:(BOOL)mute error:(FlutterError *_Nullable *_Nonnull)error;
- (void)seekToTime:(double)time error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setStringOptionValue:(NSString *)value key:(id)key error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getDurationWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getCurrentPlayTimeWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isPlayingWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)releaseWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFTUIVodPlayerAPI(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTUIVodPlayerAPI> *_Nullable api);

extern void SetUpFTUIVodPlayerAPIWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTUIVodPlayerAPI> *_Nullable api, NSString *messageChannelSuffix);


@interface FTUIVodPlayerFlutterAPI : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger messageChannelSuffix:(nullable NSString *)messageChannelSuffix;
- (void)onPlayEventEvent:(NSDictionary<NSString *, id> *)event completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onBindVodControllerWithCompletion:(void (^)(FlutterError *_Nullable))completion;
- (void)onUnBindVodControllerWithCompletion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
