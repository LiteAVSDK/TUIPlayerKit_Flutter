program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "4.28.4"}, {"coremlc-version", "1436.100.10"}, {"coremltools-component-torch", "2.2.0"}, {"coremltools-source-dialect", "TorchScript"}, {"coremltools-version", "7.2"}})]
{
    func main<ios15>(tensor<fp32, [1, 1, ?, ?]> input_image) [FlexibleShapeInformation = tuple<tuple<tensor<string, []>, dict<tensor<string, []>, tensor<int32, [?]>>>>((("DefaultShapes", {{"input_image", [1, 1, 540, 960]}})))] {
            tensor<int32, []> var_4 = const()[name = tensor<string, []>("op_4"), val = tensor<int32, []>(2)];
            tensor<int32, []> var_5 = const()[name = tensor<string, []>("op_5"), val = tensor<int32, []>(1)];
            tensor<int32, [2]> var_15 = const()[name = tensor<string, []>("op_15"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [2]> var_17 = const()[name = tensor<string, []>("op_17"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_3_pad_type_0 = const()[name = tensor<string, []>("input_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_3_pad_0 = const()[name = tensor<string, []>("input_3_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<string, []> input_image_to_fp16_dtype_0 = const()[name = tensor<string, []>("input_image_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [4, 1, 3, 3]> conv_0_weight_to_fp16 = const()[name = tensor<string, []>("conv_0_weight_to_fp16"), val = tensor<fp16, [4, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [4]> conv_0_bias_to_fp16 = const()[name = tensor<string, []>("conv_0_bias_to_fp16"), val = tensor<fp16, [4]>([-0x1.76cp-9, -0x1.6bp-12, -0x1.894p-3, -0x1.bf8p-8])];
            tensor<fp16, [1, 1, ?, ?]> cast_1 = cast(dtype = input_image_to_fp16_dtype_0, x = input_image)[name = tensor<string, []>("cast_1")];
            tensor<fp16, [1, 4, ?, ?]> input_3_cast_fp16 = conv(bias = conv_0_bias_to_fp16, dilations = var_17, groups = var_5, pad = input_3_pad_0, pad_type = input_3_pad_type_0, strides = var_15, weight = conv_0_weight_to_fp16, x = cast_1)[name = tensor<string, []>("input_3_cast_fp16")];
            tensor<fp16, []> var_3_to_fp16 = const()[name = tensor<string, []>("op_3_to_fp16"), val = tensor<fp16, []>(0x1.998p-3)];
            tensor<fp16, [1, 4, ?, ?]> input_5_cast_fp16 = leaky_relu(alpha = var_3_to_fp16, x = input_3_cast_fp16)[name = tensor<string, []>("input_5_cast_fp16")];
            tensor<int32, [2]> var_23 = const()[name = tensor<string, []>("op_23"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_25 = const()[name = tensor<string, []>("op_25"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_7_pad_type_0 = const()[name = tensor<string, []>("input_7_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_7_pad_0 = const()[name = tensor<string, []>("input_7_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<fp16, [8, 4, 3, 3]> conv_2_weight_to_fp16 = const()[name = tensor<string, []>("conv_2_weight_to_fp16"), val = tensor<fp16, [8, 4, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(256)))];
            tensor<fp16, [8]> conv_2_bias_to_fp16 = const()[name = tensor<string, []>("conv_2_bias_to_fp16"), val = tensor<fp16, [8]>([0x1.a24p-5, -0x1.77p-6, -0x1.f48p-6, 0x1.9b4p-8, -0x1.934p-4, 0x1.74cp-6, 0x1.198p-5, -0x1.5c8p-4])];
            tensor<fp16, [1, 8, ?, ?]> input_7_cast_fp16 = conv(bias = conv_2_bias_to_fp16, dilations = var_25, groups = var_5, pad = input_7_pad_0, pad_type = input_7_pad_type_0, strides = var_23, weight = conv_2_weight_to_fp16, x = input_5_cast_fp16)[name = tensor<string, []>("input_7_cast_fp16")];
            tensor<fp16, [1, 8, ?, ?]> input_9_cast_fp16 = leaky_relu(alpha = var_3_to_fp16, x = input_7_cast_fp16)[name = tensor<string, []>("input_9_cast_fp16")];
            tensor<int32, [2]> var_31 = const()[name = tensor<string, []>("op_31"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_33 = const()[name = tensor<string, []>("op_33"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_11_pad_type_0 = const()[name = tensor<string, []>("input_11_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_11_pad_0 = const()[name = tensor<string, []>("input_11_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<fp16, [8, 8, 3, 3]> conv_4_weight_to_fp16 = const()[name = tensor<string, []>("conv_4_weight_to_fp16"), val = tensor<fp16, [8, 8, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(896)))];
            tensor<fp16, [8]> conv_4_bias_to_fp16 = const()[name = tensor<string, []>("conv_4_bias_to_fp16"), val = tensor<fp16, [8]>([-0x1.ap-5, -0x1.314p-5, -0x1.53cp-10, -0x1.01cp-4, -0x1.f98p-6, -0x1.598p-5, -0x1.10cp-6, -0x1.744p-5])];
            tensor<fp16, [1, 8, ?, ?]> input_11_cast_fp16 = conv(bias = conv_4_bias_to_fp16, dilations = var_33, groups = var_5, pad = input_11_pad_0, pad_type = input_11_pad_type_0, strides = var_31, weight = conv_4_weight_to_fp16, x = input_9_cast_fp16)[name = tensor<string, []>("input_11_cast_fp16")];
            tensor<fp16, [1, 8, ?, ?]> input_13_cast_fp16 = leaky_relu(alpha = var_3_to_fp16, x = input_11_cast_fp16)[name = tensor<string, []>("input_13_cast_fp16")];
            tensor<int32, [2]> var_39 = const()[name = tensor<string, []>("op_39"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_41 = const()[name = tensor<string, []>("op_41"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_pad_type_0 = const()[name = tensor<string, []>("input_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_pad_0 = const()[name = tensor<string, []>("input_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<fp16, [4, 8, 3, 3]> conv_6_weight_to_fp16 = const()[name = tensor<string, []>("conv_6_weight_to_fp16"), val = tensor<fp16, [4, 8, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2112)))];
            tensor<fp16, [4]> conv_6_bias_to_fp16 = const()[name = tensor<string, []>("conv_6_bias_to_fp16"), val = tensor<fp16, [4]>([-0x1.8cp-12, -0x1.a4cp-14, -0x1.afp-12, -0x1.edp-16])];
            tensor<fp16, [1, 4, ?, ?]> input_cast_fp16 = conv(bias = conv_6_bias_to_fp16, dilations = var_41, groups = var_5, pad = input_pad_0, pad_type = input_pad_type_0, strides = var_39, weight = conv_6_weight_to_fp16, x = input_13_cast_fp16)[name = tensor<string, []>("input_cast_fp16")];
            tensor<fp16, [1, 1, ?, ?]> fea_cast_fp16 = pixel_shuffle(upscale_factor = var_4, x = input_cast_fp16)[name = tensor<string, []>("fea_cast_fp16")];
            tensor<fp16, [1, 1, ?, ?]> var_46_cast_fp16 = add(x = cast_1, y = fea_cast_fp16)[name = tensor<string, []>("op_46_cast_fp16")];
            tensor<string, []> var_46_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_46_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp32, [1, 1, ?, ?]> output_image = cast(dtype = var_46_cast_fp16_to_fp32_dtype_0, x = var_46_cast_fp16)[name = tensor<string, []>("cast_0")];
        } -> (output_image);
}