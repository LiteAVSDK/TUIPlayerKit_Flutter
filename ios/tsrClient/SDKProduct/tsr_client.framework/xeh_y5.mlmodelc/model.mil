program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "4.28.4"}, {"coremlc-version", "1436.100.10"}, {"coremltools-component-torch", "2.2.0"}, {"coremltools-source-dialect", "TorchScript"}, {"coremltools-version", "7.2"}})]
{
    func main<ios16>(tensor<fp16, [1, 1, ?, ?]> input_image) [FlexibleShapeInformation = tuple<tuple<tensor<string, []>, dict<tensor<string, []>, tensor<int32, [?]>>>>((("DefaultShapes", {{"input_image", [1, 1, 540, 960]}})))] {
            tensor<fp16, []> input_image__scaled___y_0 = const()[name = tensor<string, []>("input_image__scaled___y_0"), val = tensor<fp16, []>(0x1.01p-8)];
            tensor<fp16, [1, 1, ?, ?]> input_image__scaled__ = mul(x = input_image, y = input_image__scaled___y_0)[name = tensor<string, []>("input_image__scaled__")];
            tensor<int32, []> var_7 = const()[name = tensor<string, []>("op_7"), val = tensor<int32, []>(1)];
            tensor<int32, [2]> var_11 = const()[name = tensor<string, []>("op_11"), val = tensor<int32, [2]>([2, 2])];
            tensor<int32, [2]> var_13 = const()[name = tensor<string, []>("op_13"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_3_pad_type_0 = const()[name = tensor<string, []>("input_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_3_pad_0 = const()[name = tensor<string, []>("input_3_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<fp16, [4, 1, 3, 3]> feaconv_weight_to_fp16 = const()[name = tensor<string, []>("feaconv_weight_to_fp16"), val = tensor<fp16, [4, 1, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [4]> feaconv_bias_to_fp16 = const()[name = tensor<string, []>("feaconv_bias_to_fp16"), val = tensor<fp16, [4]>([0x1.d1p-4, -0x1.3ccp-4, 0x1.b6cp-6, 0x1.c48p-3])];
            tensor<fp16, [1, 4, ?, ?]> input_3_cast_fp16 = conv(bias = feaconv_bias_to_fp16, dilations = var_13, groups = var_7, pad = input_3_pad_0, pad_type = input_3_pad_type_0, strides = var_11, weight = feaconv_weight_to_fp16, x = input_image__scaled__)[name = tensor<string, []>("input_3_cast_fp16")];
            tensor<int32, []> var_17 = const()[name = tensor<string, []>("op_17"), val = tensor<int32, []>(1)];
            tensor<int32, [2]> var_27 = const()[name = tensor<string, []>("op_27"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_29 = const()[name = tensor<string, []>("op_29"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_5_pad_type_0 = const()[name = tensor<string, []>("input_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_5_pad_0 = const()[name = tensor<string, []>("input_5_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<fp16, [16, 4, 3, 3]> conv_0_weight_to_fp16 = const()[name = tensor<string, []>("conv_0_weight_to_fp16"), val = tensor<fp16, [16, 4, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(256)))];
            tensor<fp16, [16]> conv_0_bias_to_fp16 = const()[name = tensor<string, []>("conv_0_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1472)))];
            tensor<fp16, [1, 16, ?, ?]> input_5_cast_fp16 = conv(bias = conv_0_bias_to_fp16, dilations = var_29, groups = var_17, pad = input_5_pad_0, pad_type = input_5_pad_type_0, strides = var_27, weight = conv_0_weight_to_fp16, x = input_3_cast_fp16)[name = tensor<string, []>("input_5_cast_fp16")];
            tensor<fp16, []> var_16_to_fp16 = const()[name = tensor<string, []>("op_16_to_fp16"), val = tensor<fp16, []>(0x1.998p-3)];
            tensor<fp16, [1, 16, ?, ?]> input_7_cast_fp16 = leaky_relu(alpha = var_16_to_fp16, x = input_5_cast_fp16)[name = tensor<string, []>("input_7_cast_fp16")];
            tensor<int32, [2]> var_35 = const()[name = tensor<string, []>("op_35"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_37 = const()[name = tensor<string, []>("op_37"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_9_pad_type_0 = const()[name = tensor<string, []>("input_9_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_9_pad_0 = const()[name = tensor<string, []>("input_9_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<fp16, [16, 16, 3, 3]> conv_2_weight_to_fp16 = const()[name = tensor<string, []>("conv_2_weight_to_fp16"), val = tensor<fp16, [16, 16, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1600)))];
            tensor<fp16, [16]> conv_2_bias_to_fp16 = const()[name = tensor<string, []>("conv_2_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6272)))];
            tensor<fp16, [1, 16, ?, ?]> input_9_cast_fp16 = conv(bias = conv_2_bias_to_fp16, dilations = var_37, groups = var_17, pad = input_9_pad_0, pad_type = input_9_pad_type_0, strides = var_35, weight = conv_2_weight_to_fp16, x = input_7_cast_fp16)[name = tensor<string, []>("input_9_cast_fp16")];
            tensor<fp16, [1, 16, ?, ?]> input_11_cast_fp16 = leaky_relu(alpha = var_16_to_fp16, x = input_9_cast_fp16)[name = tensor<string, []>("input_11_cast_fp16")];
            tensor<int32, [2]> var_43 = const()[name = tensor<string, []>("op_43"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_45 = const()[name = tensor<string, []>("op_45"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_13_pad_type_0 = const()[name = tensor<string, []>("input_13_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_13_pad_0 = const()[name = tensor<string, []>("input_13_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<fp16, [16, 16, 3, 3]> conv_4_weight_to_fp16 = const()[name = tensor<string, []>("conv_4_weight_to_fp16"), val = tensor<fp16, [16, 16, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6400)))];
            tensor<fp16, [16]> conv_4_bias_to_fp16 = const()[name = tensor<string, []>("conv_4_bias_to_fp16"), val = tensor<fp16, [16]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11072)))];
            tensor<fp16, [1, 16, ?, ?]> input_13_cast_fp16 = conv(bias = conv_4_bias_to_fp16, dilations = var_45, groups = var_17, pad = input_13_pad_0, pad_type = input_13_pad_type_0, strides = var_43, weight = conv_4_weight_to_fp16, x = input_11_cast_fp16)[name = tensor<string, []>("input_13_cast_fp16")];
            tensor<fp16, [1, 16, ?, ?]> input_15_cast_fp16 = leaky_relu(alpha = var_16_to_fp16, x = input_13_cast_fp16)[name = tensor<string, []>("input_15_cast_fp16")];
            tensor<int32, [2]> var_51 = const()[name = tensor<string, []>("op_51"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_53 = const()[name = tensor<string, []>("op_53"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_pad_type_0 = const()[name = tensor<string, []>("input_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_pad_0 = const()[name = tensor<string, []>("input_pad_0"), val = tensor<int32, [4]>([1, 1, 1, 1])];
            tensor<fp16, [4, 16, 3, 3]> conv_6_weight_to_fp16 = const()[name = tensor<string, []>("conv_6_weight_to_fp16"), val = tensor<fp16, [4, 16, 3, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11200)))];
            tensor<fp16, [4]> conv_6_bias_to_fp16 = const()[name = tensor<string, []>("conv_6_bias_to_fp16"), val = tensor<fp16, [4]>([-0x1.2bcp-12, 0x1.648p-10, 0x1.2a4p-10, 0x1.4d8p-9])];
            tensor<fp16, [1, 4, ?, ?]> input_cast_fp16 = conv(bias = conv_6_bias_to_fp16, dilations = var_53, groups = var_17, pad = input_pad_0, pad_type = input_pad_type_0, strides = var_51, weight = conv_6_weight_to_fp16, x = input_15_cast_fp16)[name = tensor<string, []>("input_cast_fp16")];
            tensor<int32, []> var_56 = const()[name = tensor<string, []>("op_56"), val = tensor<int32, []>(2)];
            tensor<fp16, [1, 1, ?, ?]> var_57_cast_fp16 = pixel_shuffle(upscale_factor = var_56, x = input_cast_fp16)[name = tensor<string, []>("op_57_cast_fp16")];
            tensor<fp16, [1, 1, ?, ?]> output_image = add(x = var_57_cast_fp16, y = input_image__scaled__)[name = tensor<string, []>("op_59_cast_fp16")];
        } -> (output_image);
}